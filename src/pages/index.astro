---
import { getCollection } from "astro:content"
import Default from "../layouts/Default.astro"
import { format, formatISO } from "date-fns"

const links = [
  {
    name: "Mail",
    desc: "lucas@yklcs.com",
    href: "mailto:lucas@yklcs.com",
  },
  {
    name: "Blog",
    desc: "yklcs.com/blog",
    href: "/blog",
  },
  {
    name: "Github",
    desc: "github.com/yklcs",
    href: "https://github.com/yklcs",
  },
  {
    name: "Photo",
    desc: "yklcs.com/photos",
    href: "/photos",
  },
]

const projects = [
  {
    name: "chocc",
    desc: "ANSI C compiler in ANSI C targeting WebAssembly",
    href: "https://github.com/yklcs/chocc",
  },
  {
    name: "chromogen",
    desc: "Static site generator for self-hosted image galleries",
    href: "https://github.com/yklcs/chromogen",
  },
  {
    name: "lisp-roots",
    desc: "The roots of Lisp Ã  la John McCarthy",
    href: "https://github.com/yklcs/chromogen",
  },
]

const posts = await getCollection(
  "blog",
  ({ data }) => data.draft !== true || import.meta.env.DEV
)
---

<Default meta={{ title: "yklcs.com" }}>
  <p class="bio">
    <span class="bio-name">Lucas Yunkyu Lee is a</span>
    <span class="bio-first">student</span> at POSTECH with interests in
    research, development, and design. Currently performing military service in
    the KATUSA program, MOS 11B.
  </p>
  <p class="bio-sub" id="ets-counter-container">
    <span id="ets-counter"></span>
  </p>
  <h2 class="section-header">Links</h2>
  <div class:list={["section", "links"]}>
    {
      links.map(link => (
        <a href={link.href} class="link">
          <span>{link.name}</span>
          <span class="sub">{link.desc}</span>
        </a>
      ))
    }
  </div>
  <h2 class="section-header">Projects</h2>
  <div class:list={["section", "projects"]}>
    {
      projects.map(project => (
        <div class="entry">
          <a href={project.href}>
            <h3 class="entry-name">{project.name}</h3>
            <span class="entry-desc">{project.desc} </span>
          </a>
        </div>
      ))
    }
  </div>
  <h2 class="section-header">Posts</h2>
  <div class:list={["section", "projects"]}>
    {
      posts
        .slice(0, 3)
        .reverse()
        .map(post => (
          <div class="entry">
            <a href={`/blog/${post.slug}`}>
              <h3 class="entry-name sub">{post.data.title}</h3>
            </a>
          </div>
        ))
    }
  </div>
</Default>

<style lang="scss">
  .entry {
    display: flex;
    flex-direction: column;
    align-items: flex-start;

    .entry-name {
      margin: 0;
      font-weight: 400;
      font-size: 1em;
    }

    .entry-desc {
      color: var(--neutral-60);
    }
  }

  .bio {
    hyphens: none;

    .bio-name {
      @media screen and (min-width: 70rem) {
        display: none;
      }
    }

    .bio-first {
      @media screen and (min-width: 70rem) {
        text-transform: capitalize;
      }
    }
  }

  .bio-sub {
    margin: -1rem 0 0;

    #ets-counter {
      pointer-events: none;
    }
  }

  .section-header {
    grid-column: wide-start / main-start;
    margin: 0;
    font-weight: 400;
    font-size: 1em;
    // color: var(--neutral-60);
  }

  .section,
  .section-header {
    // border-top: 1px solid;
    // border-color: var(--neutral-10);
    padding: 1rem 0 0;
  }

  .section {
    @media screen and (max-width: 70rem) {
      padding: 0;
    }
  }

  .links {
    display: flex;
    flex-direction: column;
    align-items: flex-start;

    .link {
      display: flex;
      gap: 1ch;
    }
  }

  .projects {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sub {
    color: var(--neutral-60);
  }
</style>

<script>
  const el = document.querySelector("#ets-counter")!
  const container = document.querySelector("#ets-counter-container")!
  const now = new Date()
  const ets = new Date("2024-03-18")
  let diff = Math.abs(ets.valueOf() - now.valueOf())

  const before = document.createElement("span")
  const dot = document.createTextNode("")
  const after = document.createElement("span")
  const desc = document.createElement("span")

  before.style.fontVariantNumeric = "tabular-nums"
  after.style.fontVariantNumeric = "tabular-nums"
  desc.textContent = " days to ETS."

  el.appendChild(before)
  el.appendChild(dot)
  el.appendChild(after)
  el.appendChild(desc)

  let paused = false
  container.addEventListener("click", () => {
    paused = !paused
  })

  const lowMotion = window.matchMedia("(prefers-reduced-motion)").matches

  let time_prev: number
  const step: FrameRequestCallback = time => {
    if (time_prev === undefined) {
      time_prev = time
    }
    const delta = time - time_prev

    diff -= delta
    const afterDecimal = lowMotion || paused

    const diffDay = diff / 1000 / 60 / 60 / 24
    before.textContent = Math.floor(diffDay).toString()
    dot.textContent = afterDecimal ? "" : "."
    after.textContent = afterDecimal
      ? ""
      : Number(diffDay).toFixed(7).split(".")[1]

    time_prev = time
    window.requestAnimationFrame(step)
  }

  window.requestAnimationFrame(step)
</script>
