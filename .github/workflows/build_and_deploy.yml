name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: "ap-northeast-2"
  AWS_ROLE: "arn:aws:iam::724157050461:role/github-oidc"

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install
        id: install
        run: pnpm i

      - name: Build
        run: pnpm build

      - name: Start deployment
        uses: actions/github-script@v7
        id: start-deployment
        with:
          result-encoding: string
          script: |
            const { data: { id } } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/main",
              environment: "Production",
              description: "Triggered deployment to AWS",
              environment_url: "https://yklcs.com"
            })
            console.log(`Created deployment ${id}`)
            return id

      - name: Deploy to AWS S3
        run: |
          aws s3 rm s3://yklcs.com --recursive --exclude "photos/*"
          aws s3 cp dist s3://yklcs.com --cache-control "public, max-age=0, must-revalidate" --recursive --exclude "*" --include "*"
          aws s3 cp dist s3://yklcs.com --cache-control "public, max-age=31536000, immutable" --recursive --exclude "*" --include "*.woff" --include "*.woff2" --include "*.webp"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        id: update-deployment
        env:
          DEPLOYMENT_ID: ${{ steps.start-deployment.outputs.result }}
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: process.env.JOB_STATUS === "success" ? "success" : "failure",
              environment: "Production",
              description: `AWS Deployment result: ${process.env.JOB_STATUS}`,
              auto_inactive: true,
              environment_url: "https://yklcs.com"
            })
