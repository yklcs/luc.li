name: Build and Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: [lint]
    types: [completed]
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        id: install
        run: pnpm i

      - name: Setup Gatsby cache
        uses: actions/cache@v3
        with:
          path: |
            .cache
            public
          key: gatsby-output-${{ github.sha }}
          restore-keys: |
            gatsby-output-

      - name: Build
        run: pnpm build

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Start Deployment
        uses: actions/github-script@v3
        id: start-deployment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { data: { id } } = await github.request("POST /repos/{owner}/{repo}/deployments", {
              mediaType: {
                previews: ["ant-man"],
              },
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: "Production",
              description: "Triggered deployment to AWS",
              ref: "heads/main",
              required_contexts: ["lint"],
              environment_url: "https://luc.li"
            })
            console.log(`Created deployment ${id}`)
            return id

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup Gatsby cache
        uses: actions/cache@v3
        with:
          path: |
            .cache
            public
          key: gatsby-output-${{ github.sha }}

      - name: Deploy to AWS S3
        run: |
          aws s3 cp public s3://luc.li --cache-control "no-cache" --recursive --exclude "*" --include "*.html" --include "page-data/**/*.json" --include "sw.js"
          aws s3 cp public s3://luc.li --cache-control "public, max-age=31536000, immutable" --recursive --exclude "*" --include "static/**" --include "*.js" --include "*.css" --exclude "sw.js"
          aws s3 sync public s3://luc.li --delete

      # - name: Invalidate AWS CloudFront Cache
      #   run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CF_DIST_ID }} --paths "/index.html" "/sw.js" "/page-data/*"

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v3
        id: update-deployment
        env:
          DEPLOYMENT_ID: ${{ steps.start-deployment.outputs.result }}
          JOB_STATUS: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.request("POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses", {
              mediaType: {
                previews: ["ant-man", "flash"],
              },
              deployment_id: process.env.DEPLOYMENT_ID,
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: "Production",
              description: `AWS Deployment result: ${process.env.JOB_STATUS}`,
              state: process.env.JOB_STATUS === "success" ? "success" : "failure",
              auto_inactive: true,
              environment_url: "https://luc.li"
            })
